#.github/workflows/build_native_plugin.yml

name: Build Cross-Platform Phonemizer Plugin for Unity

on:
  push:
    branches: [ "master-unity"]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            target: Windows
            arch: x86_64
          - os: macos-latest
            target: macOS
            arch: x86_64
          - os: macos-latest
            target: macOS
            arch: arm64
          - os: ubuntu-latest
            target: Android
            arch: arm64-v8a
          - os: ubuntu-latest
            target: Android
            arch: armeabi-v7a
          - os: macos-latest
            target: iOS
            arch: arm64

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'

    - name: Set up MSVC for Windows
      if: matrix.target == 'Windows'
      uses: TheMrMilchmann/setup-msvc-dev@v3
      with:
        arch: x64

    - name: Set up Android NDK
      if: matrix.target == 'Android'
      uses: nttld/setup-ndk@v1
      with:
        ndk-version: r25c

    - name: Set up Xcode for iOS
      if: matrix.target == 'iOS'
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable

    - name: Install build tools for iOS
      if: matrix.target == 'iOS'
      run: |
        # Ensure command line tools are installed
        xcode-select --install || true
        # Accept Xcode license
        sudo xcodebuild -license accept || true

    - name: Configure CMake
      shell: bash
      run: |
        if [ "${{ matrix.target }}" == "Android" ]; then
          echo "Android NDK Home: $ANDROID_NDK_HOME"
          echo "Android ABI: ${{ matrix.arch }}"
          echo "Checking NDK installation:"
          if [ -d "$ANDROID_NDK_HOME" ]; then
            echo "NDK directory exists"
            # Check for prebuilt directory structure
            if [ -d "$ANDROID_NDK_HOME/toolchains/llvm/prebuilt" ]; then
              echo "Available prebuilt directories:"
              ls -la "$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/" 2>/dev/null || echo "Could not list prebuilt directories"
              # Try to find the correct prebuilt directory
              PREBUILT_DIR=$(find "$ANDROID_NDK_HOME/toolchains/llvm/prebuilt" -maxdepth 1 -type d -name "*linux*" | head -1)
              if [ -n "$PREBUILT_DIR" ]; then
                echo "Using prebuilt directory: $PREBUILT_DIR"
                echo "Sample toolchain files:"
                ls -la "$PREBUILT_DIR/bin/" 2>/dev/null | head -3 || echo "Could not list toolchain files"
              fi
            fi
          else
            echo "NDK directory not found!"
          fi
        fi
        
        if [ "${{ matrix.target }}" == "iOS" ]; then
          # iOS requires special handling with proper Xcode toolchain
          export DEVELOPER_DIR=/Applications/Xcode.app/Contents/Developer
          export iOS_PLATFORM=OS
          export iOS_SDK_VERSION=$(xcrun --show-sdk-version --sdk iphoneos)
          
          echo "iOS build environment:"
          echo "DEVELOPER_DIR: $DEVELOPER_DIR"
          echo "iOS SDK Version: $iOS_SDK_VERSION"
          echo "iOS SDK Path: $(xcrun --show-sdk-path --sdk iphoneos)"
          echo "Available iOS SDKs: $(xcodebuild -showsdks | grep iOS)"
          echo "Current working directory: $(pwd)"
          echo "Checking for toolchain file:"
          ls -la cmake/ios.toolchain.cmake || echo "Toolchain file not found"
          
          # Verify Xcode installation
          if ! command -v xcodebuild &> /dev/null; then
            echo "ERROR: xcodebuild not found"
            exit 1
          fi
          
          # Configure with iOS toolchain using absolute path
          TOOLCHAIN_FILE="$(pwd)/cmake/ios.toolchain.cmake"
          echo "Using toolchain file: $TOOLCHAIN_FILE"
          
          if [ ! -f "$TOOLCHAIN_FILE" ]; then
            echo "ERROR: Toolchain file not found at $TOOLCHAIN_FILE"
            exit 1
          fi
          
          cmake -B build -G Xcode -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_SYSTEM_NAME=iOS \
            -DCMAKE_OSX_ARCHITECTURES=arm64 \
            -DCMAKE_OSX_DEPLOYMENT_TARGET=12.0 \
            -DCMAKE_TOOLCHAIN_FILE="$TOOLCHAIN_FILE" \
            -DCMAKE_XCODE_ATTRIBUTE_DEVELOPMENT_TEAM="" \
            -DCMAKE_XCODE_ATTRIBUTE_CODE_SIGNING_REQUIRED=NO \
            -DCMAKE_XCODE_ATTRIBUTE_CODE_SIGNING_ALLOWED=NO \
            -DBUILD_SHARED_LIBS=OFF
        else
          echo "Configuring CMake for ${{ matrix.target }} ${{ matrix.arch }}"
          
          if [ "${{ matrix.target }}" == "Android" ]; then
            echo "Android-specific configuration:"
            echo "ANDROID_NDK_HOME: $ANDROID_NDK_HOME"
            echo "Using toolchain: $ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake"
            echo "Target ABI: ${{ matrix.arch }}"
            echo "Platform: android-21"
          fi
          
          cmake -B build -DCMAKE_BUILD_TYPE=Release \
            ${{ matrix.target == 'Android' && format('-DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake -DANDROID_ABI={0} -DANDROID_PLATFORM=android-21', matrix.arch) || '' }} \
            ${{ matrix.target == 'macOS' && format('-DCMAKE_OSX_ARCHITECTURES={0}', matrix.arch) || '' }}
        fi

    - name: Build with CMake
      shell: bash
      run: |
        if [ "${{ matrix.target }}" == "iOS" ]; then
          # For iOS, use Xcode build system with verbose output
          echo "Building for iOS with Xcode..."
          
          # Clean build directory if it exists
          if [ -d "build" ]; then
            rm -rf build
          fi
          
          # Reconfigure with additional debugging
          TOOLCHAIN_FILE="$(pwd)/cmake/ios.toolchain.cmake"
          echo "Using toolchain file: $TOOLCHAIN_FILE"
          
          cmake -B build -G Xcode -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_SYSTEM_NAME=iOS \
            -DCMAKE_OSX_ARCHITECTURES=arm64 \
            -DCMAKE_OSX_DEPLOYMENT_TARGET=12.0 \
            -DCMAKE_TOOLCHAIN_FILE="$TOOLCHAIN_FILE" \
            -DCMAKE_XCODE_ATTRIBUTE_DEVELOPMENT_TEAM="" \
            -DCMAKE_XCODE_ATTRIBUTE_CODE_SIGNING_REQUIRED=NO \
            -DCMAKE_XCODE_ATTRIBUTE_CODE_SIGNING_ALLOWED=NO \
            -DBUILD_SHARED_LIBS=OFF \
            --debug-output
          
          # Verify that espeak-ng patch worked correctly
          echo "Checking if espeak-ng-bin references were removed..."
          if find build -name "CMakeLists.txt" -exec grep -l "espeak-ng-bin" {} \; | head -5; then
            echo "WARNING: Some espeak-ng-bin references might still exist in build files"
            echo "Showing first few problematic files:"
            find build -name "CMakeLists.txt" -exec grep -n "espeak-ng-bin" {} + | head -10
          else
            echo "✓ No espeak-ng-bin references found in CMakeLists.txt files"
          fi
          
          echo "Checking external project directory structure..."
          if [ -d "build/e" ]; then
            echo "External project directory contents:"
            find build/e -name "CMakeLists.txt" | head -5
            echo "Checking for espeak-ng-bin references in external project:"
            find build/e -name "CMakeLists.txt" -exec grep -l "espeak-ng-bin" {} \; | head -3 || echo "No references found"
          fi
          
          cmake --build build --config Release --verbose -- -allowProvisioningUpdates
          
          # Check if the library was built successfully
          if [ -f "build/Release-iphoneos/libpiper_phonemize.a" ]; then
            echo "iOS library built successfully"
            ls -la build/Release-iphoneos/libpiper_phonemize.a
          else
            echo "iOS library not found, checking other locations..."
            find build -name "libpiper_phonemize*" -type f
          fi
        else
          # Standard build for other platforms
          cmake --build build --config Release
        fi
      continue-on-error: ${{ matrix.target == 'iOS' }}

    - name: Debug Build Output
      shell: bash
      run: |
        echo "=== Debug: Checking build output ==="
        echo "Build directory contents:"
        find build -type f -name "*piper_phonemize*" -o -name "*espeak*" -o -name "*onnx*" | head -20
        echo ""
        echo "Library directory contents:"
        find lib -type f -name "*.dll" -o -name "*.dylib" -o -name "*.so" 2>/dev/null | head -10 || true
        echo ""
        echo "External build directory contents:"
        find build/ei -type f -name "*.dll" -o -name "*.dylib" -o -name "*.so" -o -name "*.a" 2>/dev/null | head -20 || true

    - name: Prepare Artifacts
      shell: bash
      run: |
        mkdir -p artifacts/Plugins/${{ matrix.target }}/${{ matrix.arch }}
        mkdir -p artifacts/Binaries/${{ matrix.target }}/${{ matrix.arch }}
        mkdir -p artifacts/StreamingAssets/espeak-ng-data

        echo "=== Preparing artifacts for ${{ matrix.target }} ${{ matrix.arch }} ==="

        # Copy compiled library
        if [ "${{ matrix.target }}" == "Windows" ]; then
          echo "Copying Windows libraries..."
          
          # Main piper_phonemize library
          if cp build/Release/piper_phonemize.dll artifacts/Plugins/Windows/x86_64/; then
            echo "✓ Copied piper_phonemize.dll from build/Release/"
          elif cp build/piper_phonemize.dll artifacts/Plugins/Windows/x86_64/; then
            echo "✓ Copied piper_phonemize.dll from build/"
          else
            echo "✗ Failed to copy piper_phonemize.dll"
          fi
          
          # Copy piper_phonemize executable
          if cp build/Release/piper_phonemize.exe artifacts/Binaries/Windows/x86_64/; then
            echo "✓ Copied piper_phonemize.exe from build/Release/"
          elif cp build/piper_phonemize.exe artifacts/Binaries/Windows/x86_64/; then
            echo "✓ Copied piper_phonemize.exe from build/"
          else
            echo "✗ Failed to copy piper_phonemize.exe"
          fi
          
          # Copy espeak-ng library
          if cp build/ei/lib/espeak-ng.dll artifacts/Plugins/Windows/x86_64/; then
            echo "✓ Copied espeak-ng.dll from build/ei/lib/"
          elif cp build/ei/bin/espeak-ng.dll artifacts/Plugins/Windows/x86_64/; then
            echo "✓ Copied espeak-ng.dll from build/ei/bin/"
          else
            echo "✗ Failed to copy espeak-ng.dll"
          fi
          
          # Copy onnxruntime library
          if find lib -name "onnxruntime.dll" -exec cp {} artifacts/Plugins/Windows/x86_64/ \; | grep -q .; then
            echo "✓ Copied onnxruntime.dll from lib/"
          elif find build -name "onnxruntime.dll" -exec cp {} artifacts/Plugins/Windows/x86_64/ \; | grep -q .; then
            echo "✓ Copied onnxruntime.dll from build/"
          else
            echo "✗ Failed to copy onnxruntime.dll"
          fi
          
          # Copy any additional Windows runtime dependencies
          find lib -name "*.dll" -exec cp {} artifacts/Plugins/Windows/x86_64/ \; 2>/dev/null || true
          echo "✓ Copied additional Windows runtime libraries"
          
        elif [ "${{ matrix.target }}" == "macOS" ]; then
          echo "Copying macOS libraries..."
          
          # Main piper_phonemize library
          if cp build/libpiper_phonemize.dylib artifacts/Plugins/macOS/${{ matrix.arch }}/; then
            echo "✓ Copied libpiper_phonemize.dylib"
          else
            echo "✗ Failed to copy libpiper_phonemize.dylib"
          fi
          
          # Copy piper_phonemize executable
          if cp build/piper_phonemize artifacts/Binaries/macOS/${{ matrix.arch }}/; then
            echo "✓ Copied piper_phonemize executable"
          else
            echo "✗ Failed to copy piper_phonemize executable"
          fi
          
          # Copy espeak-ng library
          if cp build/ei/lib/libespeak-ng.dylib artifacts/Plugins/macOS/${{ matrix.arch }}/; then
            echo "✓ Copied libespeak-ng.dylib"
          elif cp build/ei/lib/libespeak-ng.*.dylib artifacts/Plugins/macOS/${{ matrix.arch }}/; then
            echo "✓ Copied versioned libespeak-ng.dylib"
          else
            echo "✗ Failed to copy libespeak-ng.dylib"
          fi
          
          # Copy onnxruntime library
          if find lib -name "libonnxruntime*.dylib" -exec cp {} artifacts/Plugins/macOS/${{ matrix.arch }}/ \; | grep -q .; then
            echo "✓ Copied onnxruntime.dylib from lib/"
          elif find build -name "libonnxruntime*.dylib" -exec cp {} artifacts/Plugins/macOS/${{ matrix.arch }}/ \; | grep -q .; then
            echo "✓ Copied onnxruntime.dylib from build/"
          else
            echo "✗ Failed to copy onnxruntime.dylib"
          fi
          
        elif [ "${{ matrix.target }}" == "Android" ]; then
          echo "Copying Android libraries..."
          
          # Main piper_phonemize library
          if cp build/libpiper_phonemize.so artifacts/Plugins/Android/${{ matrix.arch }}/; then
            echo "✓ Copied libpiper_phonemize.so"
          else
            echo "✗ Failed to copy libpiper_phonemize.so"
          fi
          
          # Copy espeak-ng library (Android builds as static, so might not have separate .so)
          if cp build/ei/lib/libespeak-ng.so artifacts/Plugins/Android/${{ matrix.arch }}/; then
            echo "✓ Copied libespeak-ng.so"
          else
            echo "✗ Failed to copy libespeak-ng.so (might be statically linked)"
          fi
          
        elif [ "${{ matrix.target }}" == "iOS" ]; then
          echo "Copying iOS libraries..."
          
          # Check multiple possible locations for iOS library
          if [ -f "build/Release-iphoneos/libpiper_phonemize.a" ]; then
            cp build/Release-iphoneos/libpiper_phonemize.a artifacts/Plugins/iOS/
            echo "✓ Copied libpiper_phonemize.a from build/Release-iphoneos/"
          elif [ -f "build/libpiper_phonemize.a" ]; then
            cp build/libpiper_phonemize.a artifacts/Plugins/iOS/
            echo "✓ Copied libpiper_phonemize.a from build/"
          else
            echo "✗ iOS library not found, checking all locations..."
            find build -name "libpiper_phonemize*" -type f || true
          fi
          
          # Copy espeak-ng library for iOS (static library)
          if cp build/ei/lib/libespeak-ng.a artifacts/Plugins/iOS/; then
            echo "✓ Copied libespeak-ng.a"
          else
            echo "✗ Failed to copy libespeak-ng.a"
          fi
        fi

        # Copy espeak-ng data (adjust path based on actual build structure)
        if [ -d "build/ei/share/espeak-ng-data" ]; then
          cp -r build/ei/share/espeak-ng-data/* artifacts/StreamingAssets/espeak-ng-data/
          echo "✓ Copied espeak-ng-data"
        else
          echo "✗ espeak-ng-data not found"
        fi
        
        echo "=== Final artifact contents ==="
        find artifacts -type f | sort

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: phonemizer-plugin-${{ matrix.target }}-${{ matrix.arch }}
        path: artifacts/